
(define (contar-pares lst)
  (fold-right
    (lambda (next x)(cons(list next (contador next lst))
        x))
    '()
    (borrar-duplicados lst)))

(define (contador x lst)
  (fold-right
    (lambda(next contador)(if (= next x) (+ contador 1) contador))
        0
        lst))

(define (borrar-duplicados lst)
  (define (contains? y lst_temp)
    (not (zero? (contador y lst_temp))))
  (fold-right
    (lambda (next x)
      (if (contains? next x)
          x
          (cons next x)))
    '()
    lst))
(define lst '(2 3 1 3 2 2 2 3 4 6 6 6 7 1))
(contar-pares lst)